from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from fastapi import APIRouter, Request, Form, Depends, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import func, and_
from starlette.status import HTTP_401_UNAUTHORIZED
import logging

from app.db.base import get_db
from app.crud import crud_user, crud_practice, crud_challenge
from app.schemas.user import User
from app.api import deps

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")
security = HTTPBasic()

# Admin credentials - in production, these should be in environment variables
ADMIN_CREDENTIALS = {
    "username": "admin",
    "password": "1234"
}

# --- Auth Middleware and Dependencies ---

def require_admin_auth(request: Request):
    """Check if admin is authenticated"""
    if request.cookies.get("admin_logged_in") != "true":
        return RedirectResponse(url="/admin/login", status_code=302)

def get_admin_context(request: Request):
    """Get common admin template context"""
    return {
        "request": request,
        "current_admin": {
            "username": request.cookies.get("admin_username", ADMIN_CREDENTIALS["username"])
        }
    }

# --- Authentication Routes ---

@router.get("/login", response_class=HTMLResponse, name="admin_login_get")
def login_get(request: Request):
    # Redirect to dashboard if already logged in
    if request.cookies.get("admin_logged_in") == "true":
        return RedirectResponse(url="/admin", status_code=302)
    return templates.TemplateResponse("admin/login.html", {"request": request})

# --- Dashboard Routes ---

@router.get("/", response_class=HTMLResponse, name="admin_dashboard")
async def admin_dashboard(
    request: Request, 
    auth=Depends(require_admin_auth),
    db: AsyncSession = Depends(get_db)
):
    """
    Admin dashboard with error handling for all database operations.
    Even if some parts fail, the dashboard will still render with fallback data.
    """
    if isinstance(auth, RedirectResponse):
        return auth
    
    # Initialize default values for all stats
    stats = {
        "total_users": 0,
        "new_users_today": 0,
        "total_sessions": 0,
        "new_sessions_today": 0,
        "total_shots": 0,
        "new_shots_today": 0,
        "active_challenges": 0,
        "completed_challenges_today": 0
    }
    
    # Initialize default chart data
    chart_data = {
        "user_growth": {
            "labels": ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
            "data": [0, 0, 0, 0, 0, 0]
        },
        "shot_performance": {
            "labels": ["Draw", "Drive", "Weight"],
            "data": [0, 0, 0]
        }
    }
    
    # Default empty activities
    recent_activities = []
    
    try:
        # Get live statistics
        today = datetime.now()
        today_start = datetime(today.year, today.month, today.day)

        # User statistics
        try:
            stats["total_users"] = await crud_user.get_count(db)
        except Exception as e:
            logger.error(f"Error fetching total users: {e}")
        
        try:
            stats["new_users_today"] = await crud_user.get_count(
                db, 
                created_at_after=today_start
            )
        except Exception as e:
            logger.error(f"Error fetching new users today: {e}")

        # Session statistics
        try:
            stats["total_sessions"] = await crud_practice.get_session_count(db)
        except Exception as e:
            logger.error(f"Error fetching total sessions: {e}")
        
        try:
            stats["new_sessions_today"] = await crud_practice.get_session_count(
                db,
                created_at_after=today_start
            )
        except Exception as e:
            logger.error(f"Error fetching new sessions today: {e}")

        # Shot statistics
        try:
            stats["total_shots"] = await crud_practice.get_shot_count(db)
        except Exception as e:
            logger.error(f"Error fetching total shots: {e}")
        
        try:
            stats["new_shots_today"] = await crud_practice.get_shot_count(
                db,
                created_at_after=today_start
            )
        except Exception as e:
            logger.error(f"Error fetching new shots today: {e}")

        # Challenge statistics
        try:
            stats["active_challenges"] = await crud_challenge.get_count(
                db,
                status="active"
            )
        except Exception as e:
            logger.error(f"Error fetching active challenges: {e}")
        
        try:
            stats["completed_challenges_today"] = await crud_challenge.get_count(
                db,
                status="completed",
                completed_at_after=today_start
            )
        except Exception as e:
            logger.error(f"Error fetching completed challenges today: {e}")

        # User growth chart data (last 6 months)
        try:
            months = []
            user_counts = []
            for i in range(5, -1, -1):
                month_date = today - timedelta(days=i*30)
                months.append(month_date.strftime("%b"))
                try:
                    count = await crud_user.get_count(
                        db,
                        created_at_before=month_date
                    )
                    user_counts.append(count)
                except Exception as e:
                    logger.error(f"Error fetching user count for month {month_date.strftime('%b')}: {e}")
                    user_counts.append(0)
            chart_data["user_growth"]["labels"] = months
            chart_data["user_growth"]["data"] = user_counts
        except Exception as e:
            logger.error(f"Error generating user growth chart data: {e}")

        # Shot performance chart data
        try:
            shot_types = ["Draw", "Drive", "Weight"]
            accuracies = []
            for shot_type in shot_types:
                try:
                    accuracy = await crud_practice.get_average_accuracy(
                        db,
                        shot_type=shot_type
                    )
                    accuracies.append(accuracy or 0)
                except Exception as e:
                    logger.error(f"Error fetching accuracy for shot type {shot_type}: {e}")
                    accuracies.append(0)
            chart_data["shot_performance"]["labels"] = shot_types
            chart_data["shot_performance"]["data"] = accuracies
        except Exception as e:
            logger.error(f"Error generating shot performance chart data: {e}")

        # Recent activities
        try:
            recent_activities = await crud_practice.get_recent_activities(db, limit=5)
        except Exception as e:
            logger.error(f"Error fetching recent activities: {e}")
    
    except Exception as e:
        # Catch-all exception handler to ensure the dashboard always renders
        logger.error(f"Critical error in admin dashboard: {e}")
        # We already have default values set at the beginning
    
    # Prepare context with all data (defaults or actual data)
    context = get_admin_context(request)
    context["stats"] = stats
    context["chart_data"] = chart_data
    context["recent_activities"] = recent_activities
    
    # Safely render the template
    try:
        return templates.TemplateResponse("admin/dashboard.html", context)
    except Exception as e:
        logger.error(f"Error rendering admin dashboard template: {e}")
        return HTMLResponse(content="<h1>Admin Dashboard Error</h1><p>There was an error rendering the dashboard. Please check the logs.</p>")

# --- Settings Route ---
@router.get("/settings", response_class=HTMLResponse, name="admin_settings")
async def admin_settings(
    request: Request,
    auth=Depends(require_admin_auth),
    db: AsyncSession = Depends(get_db)
):
    """
    Admin settings page
    """
    if isinstance(auth, RedirectResponse):
        return auth
        
    context = get_admin_context(request)
    return templates.TemplateResponse("admin/settings.html", context)
