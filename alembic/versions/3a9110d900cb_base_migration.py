"""Base migration

Revision ID: 3a9110d900cb
Revises: 
Create Date: 2025-08-05 15:18:16.357882

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3a9110d900cb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First create meta_drill_groups and users as they have no dependencies
    op.create_table('meta_drill_groups',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('phone_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('otp', sa.String(length=6), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)

    # Then create drill_groups which depends on users and meta_drill_groups
    op.create_table('drill_groups',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('meta_drill_group_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('difficulty', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), server_default='[]', nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('image', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['meta_drill_group_id'], ['meta_drill_groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    # Now create drills table
    op.create_table('drills',
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('difficulty', sa.Integer(), server_default='1', nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('target_score', sa.Integer(), nullable=True),
        sa.Column('drill_type', sa.String(length=50), nullable=False),
        sa.Column('duration_minutes', sa.Integer(), nullable=True),
        sa.Column('session_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Create drill_group_drills linking table
    op.create_table('drill_group_drills',
    sa.Column('drill_group_id', sa.UUID(), nullable=False),
    sa.Column('drill_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['drill_group_id'], ['drill_groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['drill_id'], ['drills.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('drill_group_id', 'drill_id')
    )
    op.create_index('idx_drill_group_drills_drill_id', 'drill_group_drills', ['drill_id'], unique=False)
    op.create_index('idx_drill_group_drills_group_id', 'drill_group_drills', ['drill_group_id'], unique=False)

    # Create sessions table
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sessions_id'), 'sessions', ['id'], unique=False)

    # Create practice_sessions table after all its dependencies exist
    op.create_table('practice_sessions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('drill_group_id', sa.UUID(), nullable=False),
        sa.Column('drill_id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['drill_group_id'], ['drill_groups.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['drill_id'], ['drills.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_practice_sessions_drill_group_id', 'practice_sessions', ['drill_group_id'], unique=False)
    op.create_index('idx_practice_sessions_drill_id', 'practice_sessions', ['drill_id'], unique=False)
    op.create_index('idx_practice_sessions_user_id', 'practice_sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_practice_sessions_id'), 'practice_sessions', ['id'], unique=False)

    # Now that practice_sessions exists, add the FK constraint to drills
    op.create_foreign_key('fk_drills_session_id', 'drills', 'practice_sessions', ['session_id'], ['id'], ondelete='SET NULL')

    # Create challenges table
    op.create_table('challenges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('recipient_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'DECLINED', 'COMPLETED', 'EXPIRED', name='challengestatus'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('drill_type', sa.String(), nullable=True),
    sa.Column('target_score', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_challenges_id'), 'challenges', ['id'], unique=False)

    # Finally create shots table
    op.create_table('shots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('drill_id', sa.UUID(), nullable=True),
    sa.Column('shot_type', sa.Enum('DRAW', 'DRIVE', 'WEIGHTED', name='shottype'), nullable=False),
    sa.Column('distance_meters', sa.Float(), nullable=True),
    sa.Column('accuracy_score', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['drill_id'], ['drills.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shots_drill_id'), 'shots', ['drill_id'], unique=False)
    op.create_index(op.f('ix_shots_id'), 'shots', ['id'], unique=False)
    op.create_index(op.f('ix_shots_session_id'), 'shots', ['session_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_shots_session_id'), table_name='shots')
    op.drop_index(op.f('ix_shots_id'), table_name='shots')
    op.drop_index(op.f('ix_shots_drill_id'), table_name='shots')
    op.drop_table('shots')
    op.drop_index('idx_drill_group_drills_group_id', table_name='drill_group_drills')
    op.drop_index('idx_drill_group_drills_drill_id', table_name='drill_group_drills')
    op.drop_table('drill_group_drills')
    op.drop_index(op.f('ix_sessions_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('drill_groups')
    op.drop_index(op.f('ix_challenges_id'), table_name='challenges')
    op.drop_table('challenges')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_practice_sessions_id'), table_name='practice_sessions')
    op.drop_index('idx_practice_sessions_user_id', table_name='practice_sessions')
    op.drop_index('idx_practice_sessions_drill_id', table_name='practice_sessions')
    op.drop_index('idx_practice_sessions_drill_group_id', table_name='practice_sessions')
    op.drop_table('practice_sessions')
    op.drop_table('meta_drill_groups')
    op.drop_table('drills')
    # ### end Alembic commands ###
